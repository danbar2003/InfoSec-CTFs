from Crypto.Util.number import getPrime, GCD, bytes_to_long, long_to_bytes

# Create task


class RSA:

    def __init__(self, ll: int) -> None:
        self.e = 65537
        self.p, self.q = getPrime(ll // 2), getPrime(ll // 2)
        while GCD(self.e, self.p - 1) != 1 or GCD(self.e, self.q - 1) != 1 or self.p == self.q:
            self.p, self.q = getPrime(ll // 2), getPrime(ll // 2)
        self.d = pow(self.e, -1, (self.p - 1) * (self.q - 1))
        self.n = self.p * self.q

    def enc(self, x: int) -> int:
        return pow(x, self.e, self.n)

    def dec(self, y: int) -> int:
        return pow(y, self.d, self.n)


flag = b'flag{f4c70rdb_c4n_h3lp_y0u_50lv3_r54_cryp705y573m_745k5}'
rsa = RSA(4096)
ct = rsa.enc(bytes_to_long(flag))

with open('../task/task.txt', 'w') as f:
    f.write('e = ' + str(hex(rsa.e)) + '\n')
    f.write('n = ' + str(hex(rsa.n)) + '\n')
    f.write('ct = ' + str(hex(ct)) + '\n')

with open('rsa_params.txt', 'w') as f:
    f.write('e = ' + str(rsa.e) + '\n')
    f.write('d = ' + str(rsa.d) + '\n')
    f.write('p = ' + str(rsa.p) + '\n')
    f.write('q = ' + str(rsa.q) + '\n')
    f.write('n = ' + str(rsa.n) + '\n')
    f.write('ct = ' + str(ct) + '\n')

# http://factordb.com/ -> rsa.n -> http://factordb.com/index.php?query=799062421104033314705168137753896383556445404466437596211262649559779383754391109426092161546554056421983803651471146037647126542849564494298005412841188550216700802164019637082211911873947520554197316879096493118438350569773480817497463053658792328614340980577798917185402307052901814904791859866335328456673525385940023778839677335391931903672878496731638281935471257143393490420716788257898185787595352627353758318224391409049997186227066268008372498847809660018267582296954020011858777232757459599592029845473132285182316443261149194676587278322891306074299911786458635277386660855145119875501636074236750034126237016429366145494439586526289294340881090765969159834505428597381345394902792120139377745591325959662122116355045114345347639058255998642971818962983910270047387152256669814478847304367807032262266796820223890237803733318504864262021482675987272520982705691453101781287310198786154177520009261474009122881051693259969653724326830513960825785632501671527160361795870686892477964347951588534600910963150699130096768446791518997205221902758868625264678904612343526677521078784478893709017534656701889286969204160805089449249607978728465964493346370112087231692413250844572548538462886450179371086105092984297183364846669
# Report factors -> rsa.p -> http://factordb.com/index.php?id=1100000003990602248


# Solve task

with open('../task/task.txt', 'r') as f:
    e = int(f.readline()[4:], 16)
    n = int(f.readline()[4:], 16)
    ct = int(f.readline()[5:], 16)

print(n)
# Search n in factordb -> find p & q
p = 28202319379067501490208047967640223972527628887419121174312069871940762446191037116439778835467062167539975479560808963430713316728657821318091974782177587502977103133562514623190596522401979853897604155978389706065529684964456763671042793097939248363898812226603785142150229952531892483051629343135565017009158169764295572681006147649784770674916373016362742532035032732868305514205472359902274368791400942198050857316423038645187897952552037443809257021152791177709722355552601158212401832663511665683464894274793964666346178953264175424315896294371414865822376705827230948258710334712677553560281415434518989952471
q = n // p
d = pow(e, -1, (p - 1) * (q - 1))
print(long_to_bytes(pow(ct, d, n)))



